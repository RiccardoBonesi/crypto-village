
// ********************** LOTTERY ******************

rule CustomerSeeUpdateLottery {
  description: "Customers can see and update lotteries"
  participant: "org.digitalpayment.Customer"
  operation: READ, UPDATE
  resource: "org.digitalpayment.Lottery"  
  action: ALLOW
}

rule CustomerBuyLotteryTicket {
  description: "Customers can buy lotteryTicket only with their Wallet"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.LotteryTicket"
  condition: (v.ticketOwner.getIdentifier() == t.getIdentifier())
  action: ALLOW
}

rule CustomerBuyLotteryTicket1 {
  description: "Customers can buy lotteryTicket only with their Wallet"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.BuyLotteryTicket"
  condition: (v.ticketOwner.owner.getIdentifier() == t.getIdentifier())
  action: ALLOW
}

// ******************************* EVENT ********************************************

rule CustomerSeeUpdateEvent {
  description: "Customers can see and update events"
  participant: "org.digitalpayment.Customer"
  operation: READ, UPDATE
  resource: "org.digitalpayment.RealEvent"  
  action: ALLOW
}

rule CustomerBookEvent {
  description: "Customers can book event only for themselves"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.BookEvent"
  condition: (t.getIdentifier() == v.booker.getIdentifier())
  action: ALLOW
}

rule CustomerDeleteEventreservation {
  description: "Customers can only delete their event reservation"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.DeleteEventReservation"
  condition: (t.getIdentifier() == v.customer.getIdentifier())
  action: ALLOW
}

// ******************************* BeachUmbrella *****************************************

rule CustomerSeeBeach {
  description: "Customers can see beaches"
  participant: "org.digitalpayment.Customer"
  operation: READ
  resource: "org.digitalpayment.Beach"  
  action: ALLOW
}

rule CustomerSeeUpdateBeachUmbrella {
  description: "Customers can see and update beach umbrellas"
  participant: "org.digitalpayment.Customer"
  operation: READ, UPDATE
  resource: "org.digitalpayment.BeachUmbrella"  
  action: ALLOW
}

rule CustomerBookBeachUmbrellaReservation {
  description: "Customers can book beach umbrellas only for themselves"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.BeachUmbrellaReservation"
  condition: (t.getIdentifier() == v.customer.getIdentifier())
  action: ALLOW
}

rule CustomerBookBeachUmbrella {
  description: "Customers can book beach umbrellas only for themselves"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.BookBeachUmbrella"
  condition: (t.getIdentifier() == v.customer.getIdentifier())
  action: ALLOW
}

rule CustomerDeleteUmbrellaReservation {
  description: "Customers can delete beach umbrellas reservation only for themselves"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.DeleteUmbrellaReservation"
  condition: (t.getIdentifier() == v.customer.getIdentifier())
  action: ALLOW
}


// ******************************** RESTAURANT ***********************************************

rule CustomerSeeUpdateRestaurant {
  description: "Customers can see and update restaurants"
  participant: "org.digitalpayment.Customer"
  operation: READ, UPDATE
  resource: "org.digitalpayment.Restaurant"  
  action: ALLOW
}

rule CustomerBookDailyReservations {
  description: "Customers can book beach umbrellas only for themselves"
  participant: "org.digitalpayment.Customer"
  operation: ALL
  resource: "org.digitalpayment.DailyReservations"
  action: ALLOW
}

rule CustomerBookRestaurantReservation {
  description: "Customers can book beach umbrellas only for themselves"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.RestaurantReservation"
  condition: (t.getIdentifier() == v.customer.getIdentifier())
  action: ALLOW
}

rule CustomerBookRestaurant {
  description: "Customers can book beach umbrellas only for themselves"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.BookRestaurant"
  condition: (t.getIdentifier() == v.customer.getIdentifier())
  action: ALLOW
}

rule CustomerDeleteRestaurantReservation {
  description: "Customers can book beach umbrellas only for themselves"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(v): "org.digitalpayment.DeleteRestaurantReservation"
  condition: (t.getIdentifier() == v.customer.getIdentifier())
  action: ALLOW
}

// ********************************************************************************************


// Customers can see and update their own record only
rule R1a_CustomerSeeUpdateThemselvesOnly {
  description: "Customers can see and update their own record only"
  participant(t): "org.digitalpayment.Customer"
  operation: READ, UPDATE
  resource(v): "org.digitalpayment.Customer"
  condition: (v.getIdentifier() == t.getIdentifier())
  action: ALLOW
}

// Customers can see/manage their own Wallet
rule R1b_CustomerSeeTheirWallet {
  description: "Customers can manage their own Wallet"
  participant(t): "org.digitalpayment.Customer"
  operation: ALL
  resource(c): "org.digitalpayment.Wallet"
  condition: (c.owner.getIdentifier() == t.getIdentifier())
  action: ALLOW
}

// Enable Customers to submit payment transaction
rule R2_EnableCustomerPayment {
    description: "Enable Customers to submit payment transaction"
    participant: "org.digitalpayment.Customer"
    operation: ALL
    resource: "org.digitalpayment.Payment"
    action: ALLOW
}

// Allow Customers to see their own historical records only
rule R3_CustomersSeeOwnHistoryOnly {
  description: "Customers should be able to see the history of their own transactions only"
  participant(t): "org.digitalpayment.Customer"
  operation: READ
  resource(v): "org.hyperledger.composer.system.HistorianRecord"
  condition: (v.participantInvoking.getIdentifier() != t.getIdentifier())
  action: DENY
}


//-------------------------------------

rule SystemACL {
    description:  "System ACL to permit all access"
    participant: "org.hyperledger.composer.system.Participant"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}

rule NetworkAdminUser {
    description: "Grant business network administrators full access to user resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "**"
    action: ALLOW
}

rule NetworkAdminSystem {
    description: "Grant business network administrators full access to system resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}
